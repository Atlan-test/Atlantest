---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: ecommerce
  labels:
    app: rabbitmq-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq-app
  strategy:
    type: RollingUpdate  # Specify the rolling update strategy
    rollingUpdate:
      maxSurge: 1         # Maximum number of new pods that can be created above the desired number of pods
      maxUnavailable: 1    # Maximum number of pods that can be unavailable during the update
  template:
    metadata:
      labels:
        app: rabbitmq-app
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq-my-registry:management
          imagePullPolicy: IfNotPresent # here we can use IfNotPresent, Always, Never
          imagePullSecrets:
          - name: my_registry_secret # Name of the secret created for the private registry
          ports:
            - containerPort: 5672   # AMQP port
            - containerPort: 15672   # Management UI port
          envFrom:
            - configMapRef:
                name: rabbitmq-config
          resources:
            requests:
              memory: "256Mi"  # Minimum memory request
              cpu: "500m"      # Minimum CPU request
            limits:
              memory: "512Mi"  # Maximum memory limit
              cpu: "1"         # Maximum CPU limit
          # Liveness Probe
          livenessProbe:
            httpGet:
              path: /healthz         # Endpoint to check if the app is alive
              port: 80
            initialDelaySeconds: 10   # Wait for 30 seconds before starting to probe
            failureThreshold: 3   # consider it as failure after 3 attempts
            timeoutSeconds: 20    # After 20 sec request will timedout
            periodSeconds: 10          # Check every 10 seconds
        # Readiness Probe
          readinessProbe:
            httpGet:
              path: /Ready        # Endpoint to check if the app is ready to serve traffic
              port: 80
            initialDelaySeconds: 10   # Wait for 30 seconds before starting to probe
            failureThreshold: 3   # consider it as failure after 3 attempts
            timeoutSeconds: 20    # After 20 sec request will timedout
            periodSeconds: 10          # Check every 10 seconds

          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: RabbitMQ-pv
      volumes:
        - name: RabbitMQ-pv
          persistentVolumeClaim:
            claimName: rabbitmq-pvc  # Reference to a PVC for persistent storage