apiVersion: apps/v1 
kind: Deployment 
metadata:
  name: react-frontend-deployment
  namesapace: ecommerce # this can be different, depends on which environment we use
  annotations: # arbitrary non-identifying metadata
    version: "1.0.0"
    kubernetes.io/change-cause: "Updated deployment to version 1.0.0"
  labels:  # used for attaching key:value pair, used to identify/select the pods
    app: frontend-nginx
spec:
  replicas: 3  # Number of desired pods
  selector:  
    matchLabels:
      app: frontend-nginx  # Selects Pods with the label app=frontend-nginx
  strategy:
    type: RollingUpdate  # Specify the rolling update strategy
    rollingUpdate:
      maxSurge: 1         # Maximum number of new pods that can be created above the desired number of pods
      maxUnavailable: 1    # Maximum number of pods that can be unavailable during the update
  template:     
    metadata:
      labels:
        app: frontend-nginx
    spec:
      containers:
      - name: nginx
        image: my_private_image.nginx:latest  # Use the latest NGINX image from private registry
        imagePullPolicy: IfNotPresent # here we can use IfNotPresent, Always, Never
        imagePullSecrets:
        - name: my_registry_secret # Name of the secret created for the private registry
        ports:
        - containerPort: 80  # Expose port 80 on the container
        resources:
            requests:
              memory: "256Mi"  # Minimum memory request
              cpu: "500m"      # Minimum CPU request
            limits:
              memory: "512Mi"  # Maximum memory limit
              cpu: "1"         # Maximum CPU limit
        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /healthz         # Endpoint to check if the app is alive
            port: 80
          initialDelaySeconds: 10   # Wait for 30 seconds before starting to probe
          failureThreshold: 3   # consider it as failure after 3 attempts
          timeoutSeconds: 20    # After 20 sec request will timedout
          periodSeconds: 10          # Check every 10 seconds
        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /Ready        # Endpoint to check if the app is ready to serve traffic
            port: 80
          initialDelaySeconds: 10   # Wait for 30 seconds before starting to probe
          failureThreshold: 3   # consider it as failure after 3 attempts
          timeoutSeconds: 20    # After 20 sec request will timedout
          periodSeconds: 10          # Check every 10 seconds
